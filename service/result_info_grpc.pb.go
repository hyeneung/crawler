// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0--rc3
// source: result_info.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ResultInfo_InsertDomain_FullMethodName = "/service.ResultInfo/InsertDomain"
	ResultInfo_InsertPosts_FullMethodName  = "/service.ResultInfo/InsertPosts"
	ResultInfo_GetLogs_FullMethodName      = "/service.ResultInfo/GetLogs"
	ResultInfo_InsertPosts__FullMethodName = "/service.ResultInfo/InsertPosts_"
)

// ResultInfoClient is the client API for ResultInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResultInfoClient interface {
	InsertDomain(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*Response, error)
	InsertPosts(ctx context.Context, opts ...grpc.CallOption) (ResultInfo_InsertPostsClient, error)
	GetLogs(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (ResultInfo_GetLogsClient, error)
	InsertPosts_(ctx context.Context, opts ...grpc.CallOption) (ResultInfo_InsertPosts_Client, error)
}

type resultInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewResultInfoClient(cc grpc.ClientConnInterface) ResultInfoClient {
	return &resultInfoClient{cc}
}

func (c *resultInfoClient) InsertDomain(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ResultInfo_InsertDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultInfoClient) InsertPosts(ctx context.Context, opts ...grpc.CallOption) (ResultInfo_InsertPostsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResultInfo_ServiceDesc.Streams[0], ResultInfo_InsertPosts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &resultInfoInsertPostsClient{ClientStream: stream}
	return x, nil
}

type ResultInfo_InsertPostsClient interface {
	Send(*Post) error
	CloseAndRecv() (*wrapperspb.UInt32Value, error)
	grpc.ClientStream
}

type resultInfoInsertPostsClient struct {
	grpc.ClientStream
}

func (x *resultInfoInsertPostsClient) Send(m *Post) error {
	return x.ClientStream.SendMsg(m)
}

func (x *resultInfoInsertPostsClient) CloseAndRecv() (*wrapperspb.UInt32Value, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(wrapperspb.UInt32Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *resultInfoClient) GetLogs(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (ResultInfo_GetLogsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResultInfo_ServiceDesc.Streams[1], ResultInfo_GetLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &resultInfoGetLogsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ResultInfo_GetLogsClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type resultInfoGetLogsClient struct {
	grpc.ClientStream
}

func (x *resultInfoGetLogsClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *resultInfoClient) InsertPosts_(ctx context.Context, opts ...grpc.CallOption) (ResultInfo_InsertPosts_Client, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResultInfo_ServiceDesc.Streams[2], ResultInfo_InsertPosts__FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &resultInfoInsertPosts_Client{ClientStream: stream}
	return x, nil
}

type ResultInfo_InsertPosts_Client interface {
	Send(*Post) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type resultInfoInsertPosts_Client struct {
	grpc.ClientStream
}

func (x *resultInfoInsertPosts_Client) Send(m *Post) error {
	return x.ClientStream.SendMsg(m)
}

func (x *resultInfoInsertPosts_Client) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ResultInfoServer is the server API for ResultInfo service.
// All implementations must embed UnimplementedResultInfoServer
// for forward compatibility
type ResultInfoServer interface {
	InsertDomain(context.Context, *UnaryRequest) (*Response, error)
	InsertPosts(ResultInfo_InsertPostsServer) error
	GetLogs(*wrapperspb.UInt64Value, ResultInfo_GetLogsServer) error
	InsertPosts_(ResultInfo_InsertPosts_Server) error
	mustEmbedUnimplementedResultInfoServer()
}

// UnimplementedResultInfoServer must be embedded to have forward compatible implementations.
type UnimplementedResultInfoServer struct {
}

func (UnimplementedResultInfoServer) InsertDomain(context.Context, *UnaryRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertDomain not implemented")
}
func (UnimplementedResultInfoServer) InsertPosts(ResultInfo_InsertPostsServer) error {
	return status.Errorf(codes.Unimplemented, "method InsertPosts not implemented")
}
func (UnimplementedResultInfoServer) GetLogs(*wrapperspb.UInt64Value, ResultInfo_GetLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedResultInfoServer) InsertPosts_(ResultInfo_InsertPosts_Server) error {
	return status.Errorf(codes.Unimplemented, "method InsertPosts_ not implemented")
}
func (UnimplementedResultInfoServer) mustEmbedUnimplementedResultInfoServer() {}

// UnsafeResultInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResultInfoServer will
// result in compilation errors.
type UnsafeResultInfoServer interface {
	mustEmbedUnimplementedResultInfoServer()
}

func RegisterResultInfoServer(s grpc.ServiceRegistrar, srv ResultInfoServer) {
	s.RegisterService(&ResultInfo_ServiceDesc, srv)
}

func _ResultInfo_InsertDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultInfoServer).InsertDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResultInfo_InsertDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultInfoServer).InsertDomain(ctx, req.(*UnaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultInfo_InsertPosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ResultInfoServer).InsertPosts(&resultInfoInsertPostsServer{ServerStream: stream})
}

type ResultInfo_InsertPostsServer interface {
	SendAndClose(*wrapperspb.UInt32Value) error
	Recv() (*Post, error)
	grpc.ServerStream
}

type resultInfoInsertPostsServer struct {
	grpc.ServerStream
}

func (x *resultInfoInsertPostsServer) SendAndClose(m *wrapperspb.UInt32Value) error {
	return x.ServerStream.SendMsg(m)
}

func (x *resultInfoInsertPostsServer) Recv() (*Post, error) {
	m := new(Post)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ResultInfo_GetLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.UInt64Value)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResultInfoServer).GetLogs(m, &resultInfoGetLogsServer{ServerStream: stream})
}

type ResultInfo_GetLogsServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type resultInfoGetLogsServer struct {
	grpc.ServerStream
}

func (x *resultInfoGetLogsServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _ResultInfo_InsertPosts__Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ResultInfoServer).InsertPosts_(&resultInfoInsertPosts_Server{ServerStream: stream})
}

type ResultInfo_InsertPosts_Server interface {
	Send(*Response) error
	Recv() (*Post, error)
	grpc.ServerStream
}

type resultInfoInsertPosts_Server struct {
	grpc.ServerStream
}

func (x *resultInfoInsertPosts_Server) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *resultInfoInsertPosts_Server) Recv() (*Post, error) {
	m := new(Post)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ResultInfo_ServiceDesc is the grpc.ServiceDesc for ResultInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResultInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.ResultInfo",
	HandlerType: (*ResultInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertDomain",
			Handler:    _ResultInfo_InsertDomain_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InsertPosts",
			Handler:       _ResultInfo_InsertPosts_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetLogs",
			Handler:       _ResultInfo_GetLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "InsertPosts_",
			Handler:       _ResultInfo_InsertPosts__Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "result_info.proto",
}
